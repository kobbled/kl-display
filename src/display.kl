PROGRAM display
%NOLOCKGROUP

%include display.klt

%include klevkmsk.kl

VAR
  keyboard : FILE

--karel utility
%include klrdutil.kl
%include errors.klh
%from strings.klh %import str_parse, i_to_s, strreg_to_s, numreg_to_s, posreg_to_s
%from registers.klh %import get_comment, get_io
%include display.klh

BEGIN
END display

--### Public #####

--clear User display
ROUTINE display__clear
  VAR
    status : INTEGER
  BEGIN
    -- from klrdutil
    clear_win(TPDISPLAY, status)
    clear_win(TPPROMPT, status)
    clear_win(TPFUNC, status)

    CHK_STAT(status)
    -- Not sure if nessecary to clear user
    -- FORCE_SPMENU(TP_PANEL, SPI_TPUSER, 1)
  END display__clear

ROUTINE display__show
  BEGIN
      FORCE_SPMENU(TP_PANEL, SPI_TPUSER, 1)
  END display__show

-- print message set in display__set_message
ROUTINE display__print_line
  BEGIN
    WRITE TPDISPLAY(str_parse(str, MAX_DISPLAY_LENGTH), CR)
  END display__print_line

ROUTINE display__print
  BEGIN
    WRITE TPDISPLAY(str_parse(str, MAX_DISPLAY_LENGTH))
  END display__print

--print registers
ROUTINE display__string_reg
  VAR
    cmt : STRING[17]
  BEGIN
    IF NOT show_reg THEN RETURN(strreg_to_s(reg_no)); ENDIF

    cmt = registers__get_comment('SR', reg_no)
    --set comment
    IF STR_LEN(cmt) > 0 THEN
      cmt = ':' + cmt
    ENDIF

    RETURN('SR[' + i_to_s(reg_no) + cmt + ']=' + strreg_to_s(reg_no))
  END display__string_reg

ROUTINE display__register
  VAR
    cmt : STRING[17]
  BEGIN
    IF NOT show_reg THEN RETURN(numreg_to_s(reg_no)); ENDIF

    --set comment
    cmt = registers__get_comment('R', reg_no)
    IF STR_LEN(cmt) > 0 THEN
      cmt = ':' + cmt
    ENDIF

    RETURN('R[' + i_to_s(reg_no) + cmt + ']=' + numreg_to_s(reg_no))

  END display__register

ROUTINE display__posreg
  VAR
    cmt : STRING[17]
  BEGIN
    IF NOT show_reg THEN RETURN(posreg_to_s(reg_no, grp_no)); ENDIF

    --set comment
    cmt = registers__get_comment('PR', reg_no)
    IF STR_LEN(cmt) > 0 THEN
      cmt = ':' + cmt
    ENDIF

    RETURN('PR[' + i_to_s(reg_no) + cmt + ']=' + posreg_to_s(reg_no, grp_no))
  END display__posreg

ROUTINE display__io
  VAR
    val : INTEGER
    s : STRING[5]
    cmt : STRING[17]
  BEGIN

    val = registers__get_io(typ, reg_no)
    IF (NOT (typ ='AI')) OR (NOT (typ ='AO')) THEN
      IF (val = 1) THEN s = 'TRUE' ; ENDIF
      IF (val = 0) THEN s = 'FALSE' ; ENDIF
    ELSE
      s = i_to_s(val)
    ENDIF

    IF NOT show_reg THEN RETURN(s); ENDIF

    --set comment
    cmt = registers__get_comment(typ, reg_no)
    IF STR_LEN(cmt) > 0 THEN
      cmt = ':' + cmt
    ENDIF

    RETURN(typ + '['+ i_to_s(reg_no) + cmt + ']=' + s)
  END display__io

ROUTINE display__input_string
  VAR
    input : STRING[32]
    status : INTEGER
  BEGIN
    clear_win(TPPROMPT, status)
    WRITE TPPROMPT(prompt_msg)
    input = display__alpha

    RETURN(input)

  END display__input_string

ROUTINE display__input_int
  VAR
    input : INTEGER
    status : INTEGER
  BEGIN
    clear_win(TPPROMPT, status)
    WRITE TPPROMPT(prompt_msg)
    READ(input)

    RETURN(input)

  END display__input_int

ROUTINE display__input_real
  VAR
    input : REAL
    status : INTEGER
  BEGIN
    clear_win(TPPROMPT, status)
    WRITE TPPROMPT(prompt_msg)
    READ(input)

    RETURN(input)

  END display__input_real

ROUTINE display__keyboard
  VAR
%define keyboard_buffer_size 32
    pop_index : INTEGER
    key : INTEGER
    n_bytes : INTEGER
    status : INTEGER
    input : STRING[keyboard_buffer_size]
  BEGIN
    input = ''

    -- Suspend any outstanding TP Keyboard reads
    PUSH_KEY_RD('TPKB', 255, pop_index, status)
    -- Open a file to TP Keyboard with PASALL and FIELD attributes
    -- and NOECHO
    SET_FILE_ATR(keyboard, ATR_PASSALL)
    SET_FILE_ATR(keyboard, ATR_FIELD)
    CLR_IO_STAT(keyboard)
    OPEN FILE keyboard ('RW', 'KB:TPKB')

    -- Resume any outstanding TP Keyboard reads
    POP_KEY_RD('TPKB', pop_index, status)


    --for keyboard
    READ_KB(keyboard, input, keyboard_buffer_size, 0, kc_enter_key, -1, '',
      n_bytes, key, status)

    IF (status = 0) THEN
    WRITE (CR, 'key is ', key, ', n_chars_got = ', n_bytes)
    ELSE
    WRITE (CR, 'READ_KB status is ', status)
    ENDIF

    CLOSE FILE keyboard

    RETURN(input)

  END display__keyboard

  ROUTINE display__alpha
  VAR
%define alphanumeric_buffer_size 32
    status : INTEGER
    input : STRING[alphanumeric_buffer_size]
  BEGIN
    input = ''

    --for alpha string
    DISCTRL_ALPH('t_fu', 2, 1, input, 'COMM', 0, ky_enter, status)

    RETURN(input)

  END display__alpha

