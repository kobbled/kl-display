PROGRAM display
%NOLOCKGROUP

%include display.klt
--karel utility
%include klrdutil.kl

%include errors.klh
%from strings.klh %import str_parse, i_to_s, strreg_to_s, numreg_to_s, posreg_to_s
%from registers.klh %import get_comment, get_io
%include display.klh

BEGIN
END display

--### Public #####

--clear User display
ROUTINE display__clear
  VAR
    status : INTEGER
  BEGIN
    -- from klrdutil
    clear_win(TPDISPLAY, status)
    CHK_STAT(status)
    -- Not sure if nessecary to clear user
    -- FORCE_SPMENU(TP_PANEL, SPI_TPUSER, 1)
  END display__clear

ROUTINE display__show
  BEGIN
      FORCE_SPMENU(TP_PANEL, SPI_TPUSER, 1)
  END display__show

-- print message set in display__set_message
ROUTINE display__print
  BEGIN
    WRITE TPDISPLAY(str_parse(str, MAX_DISPLAY_LENGTH), CR)
  END display__print

--print registers
ROUTINE display__string_reg
  VAR
    cmt : STRING[17]
  BEGIN
    --set comment
    IF comment THEN
      cmt = ':' + registers__get_comment('SR', reg_no)
    ELSE
      cmt = ''
    ENDIF

    RETURN('SR[' + i_to_s(reg_no) + cmt + ']=' + strreg_to_s(reg_no))
  END display__string_reg

ROUTINE display__register
  VAR
    cmt : STRING[17]
  BEGIN
    --set comment
    IF comment THEN
      cmt = ':' + registers__get_comment('R', reg_no)
    ELSE
      cmt = ''
    ENDIF

    RETURN('R[' + i_to_s(reg_no) + cmt + ']=' + numreg_to_s(reg_no))
  END display__register

ROUTINE display__posreg
  VAR
    cmt : STRING[17]
  BEGIN
    --set comment
    IF comment THEN
      cmt = ':' + registers__get_comment('PR', reg_no)
    ELSE
      cmt = ''
    ENDIF

    RETURN('PR[' + i_to_s(reg_no) + cmt + ']=' + posreg_to_s(reg_no, grp_no))
  END display__posreg

ROUTINE display__io
  VAR
    val : INTEGER
    s : STRING[5]
    cmt : STRING[17]
  BEGIN
    val = registers__get_io(typ, reg_no)
    IF (NOT (typ ='AI')) OR (NOT (typ ='AO')) THEN
      IF (val = 1) THEN s = 'TRUE' ; ENDIF
      IF (val = 0) THEN s = 'FALSE' ; ENDIF
    ELSE
      s = i_to_s(val)
    ENDIF

    --set comment
    IF comment THEN
      cmt = ':' + registers__get_comment(typ, reg_no)
    ELSE
      cmt = ''
    ENDIF

    RETURN(typ + '['+ i_to_s(reg_no) + cmt + ']=' + s)
  END display__io